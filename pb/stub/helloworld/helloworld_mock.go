// Code generated by MockGen. DO NOT EDIT.
// Source: helloworld.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=helloworld_mock.go -package=pb --source=helloworld.trpc.go
//

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockGreeterService is a mock of GreeterService interface.
type MockGreeterService struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterServiceMockRecorder
}

// MockGreeterServiceMockRecorder is the mock recorder for MockGreeterService.
type MockGreeterServiceMockRecorder struct {
	mock *MockGreeterService
}

// NewMockGreeterService creates a new mock instance.
func NewMockGreeterService(ctrl *gomock.Controller) *MockGreeterService {
	mock := &MockGreeterService{ctrl: ctrl}
	mock.recorder = &MockGreeterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterService) EXPECT() *MockGreeterServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockGreeterService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Hello mocks base method.
func (m *MockGreeterService) Hello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", ctx, req)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockGreeterServiceMockRecorder) Hello(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockGreeterService)(nil).Hello), ctx, req)
}

// MockAddService is a mock of AddService interface.
type MockAddService struct {
	ctrl     *gomock.Controller
	recorder *MockAddServiceMockRecorder
}

// MockAddServiceMockRecorder is the mock recorder for MockAddService.
type MockAddServiceMockRecorder struct {
	mock *MockAddService
}

// NewMockAddService creates a new mock instance.
func NewMockAddService(ctrl *gomock.Controller) *MockAddService {
	mock := &MockAddService{ctrl: ctrl}
	mock.recorder = &MockAddServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddService) EXPECT() *MockAddServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAddService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Add mocks base method.
func (m *MockAddService) Add(ctx context.Context, req *AddRequest) (*AddReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, req)
	ret0, _ := ret[0].(*AddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAddServiceMockRecorder) Add(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddService)(nil).Add), ctx, req)
}

// MockGreeterClientProxy is a mock of GreeterClientProxy interface.
type MockGreeterClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterClientProxyMockRecorder
}

// MockGreeterClientProxyMockRecorder is the mock recorder for MockGreeterClientProxy.
type MockGreeterClientProxyMockRecorder struct {
	mock *MockGreeterClientProxy
}

// NewMockGreeterClientProxy creates a new mock instance.
func NewMockGreeterClientProxy(ctrl *gomock.Controller) *MockGreeterClientProxy {
	mock := &MockGreeterClientProxy{ctrl: ctrl}
	mock.recorder = &MockGreeterClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterClientProxy) EXPECT() *MockGreeterClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockGreeterClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// Hello mocks base method.
func (m *MockGreeterClientProxy) Hello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockGreeterClientProxyMockRecorder) Hello(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockGreeterClientProxy)(nil).Hello), varargs...)
}

// MockAddClientProxy is a mock of AddClientProxy interface.
type MockAddClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockAddClientProxyMockRecorder
}

// MockAddClientProxyMockRecorder is the mock recorder for MockAddClientProxy.
type MockAddClientProxyMockRecorder struct {
	mock *MockAddClientProxy
}

// NewMockAddClientProxy creates a new mock instance.
func NewMockAddClientProxy(ctrl *gomock.Controller) *MockAddClientProxy {
	mock := &MockAddClientProxy{ctrl: ctrl}
	mock.recorder = &MockAddClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddClientProxy) EXPECT() *MockAddClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAddClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// Add mocks base method.
func (m *MockAddClientProxy) Add(ctx context.Context, req *AddRequest, opts ...client.Option) (*AddReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*AddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAddClientProxyMockRecorder) Add(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddClientProxy)(nil).Add), varargs...)
}
